import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { AbstractControl, ControlValueAccessor, ValidationErrors } from '@angular/forms';
import type { CountryCode } from 'libphonenumber-js';
import { NgxsmkTelInputService } from './ngxsmk-tel-input.service';
import * as i0 from "@angular/core";
export declare class NgxsmkTelInputComponent implements AfterViewInit, OnChanges, OnDestroy, ControlValueAccessor {
    private readonly zone;
    private readonly tel;
    private readonly platformId;
    inputRef: ElementRef<HTMLInputElement>;
    initialCountry: CountryCode | 'auto';
    preferredCountries: CountryCode[];
    onlyCountries?: CountryCode[];
    nationalMode: boolean;
    separateDialCode: boolean;
    allowDropdown: boolean;
    placeholder: string;
    autocomplete: string;
    name?: string;
    inputId?: string;
    disabled: boolean;
    label?: string;
    hint?: string;
    errorText?: string;
    size: 'sm' | 'md' | 'lg';
    variant: 'outline' | 'filled' | 'underline';
    showClear: boolean;
    autoFocus: boolean;
    selectOnFocus: boolean;
    formatOnBlur: boolean;
    showErrorWhenTouched: boolean;
    /** Dropdown plumbing */
    dropdownAttachToBody: boolean;
    dropdownZIndex: number;
    countryChange: EventEmitter<{
        iso2: CountryCode;
    }>;
    validityChange: EventEmitter<boolean>;
    inputChange: EventEmitter<{
        raw: string;
        e164: string | null;
        iso2: CountryCode;
    }>;
    private iti;
    private onChange;
    private onTouchedCb;
    private lastEmittedValid;
    private pendingWrite;
    private touched;
    readonly resolvedId: string;
    constructor(zone: NgZone, tel: NgxsmkTelInputService, platformId: Object);
    ngAfterViewInit(): Promise<void>;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    writeValue(val: string | null): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    validate(_: AbstractControl): ValidationErrors | null;
    focus(): void;
    selectCountry(iso2: CountryCode): void;
    clearInput(): void;
    private initIntlTelInput;
    private reinitPlugin;
    private destroyPlugin;
    private bindDomListeners;
    onBlur(): void;
    onFocus(): void;
    private handleInput;
    currentRaw(): string;
    private currentIso2;
    private setInputValue;
    get showError(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxsmkTelInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxsmkTelInputComponent, "ngxsmk-tel-input", never, { "initialCountry": { "alias": "initialCountry"; "required": false; }; "preferredCountries": { "alias": "preferredCountries"; "required": false; }; "onlyCountries": { "alias": "onlyCountries"; "required": false; }; "nationalMode": { "alias": "nationalMode"; "required": false; }; "separateDialCode": { "alias": "separateDialCode"; "required": false; }; "allowDropdown": { "alias": "allowDropdown"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "autocomplete": { "alias": "autocomplete"; "required": false; }; "name": { "alias": "name"; "required": false; }; "inputId": { "alias": "inputId"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "label": { "alias": "label"; "required": false; }; "hint": { "alias": "hint"; "required": false; }; "errorText": { "alias": "errorText"; "required": false; }; "size": { "alias": "size"; "required": false; }; "variant": { "alias": "variant"; "required": false; }; "showClear": { "alias": "showClear"; "required": false; }; "autoFocus": { "alias": "autoFocus"; "required": false; }; "selectOnFocus": { "alias": "selectOnFocus"; "required": false; }; "formatOnBlur": { "alias": "formatOnBlur"; "required": false; }; "showErrorWhenTouched": { "alias": "showErrorWhenTouched"; "required": false; }; "dropdownAttachToBody": { "alias": "dropdownAttachToBody"; "required": false; }; "dropdownZIndex": { "alias": "dropdownZIndex"; "required": false; }; }, { "countryChange": "countryChange"; "validityChange": "validityChange"; "inputChange": "inputChange"; }, never, never, true, never>;
}
