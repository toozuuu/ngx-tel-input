{"version":3,"file":"ngxsmk-tel-input.mjs","sources":["../../src/lib/ngxsmk-tel-input.service.ts","../../src/lib/ngxsmk-tel-input.component.ts","../../src/public-api.ts","../../src/ngxsmk-tel-input.ts"],"sourcesContent":["import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\r\nimport {\r\n  AsYouType,\r\n  CountryCode,\r\n  parsePhoneNumberFromString,\r\n  PhoneNumber\r\n} from 'libphonenumber-js';\r\n\r\nexport type E164 = `+${string}`;\r\n\r\nexport interface ngxsmkTelDefaults {\r\n  /** Default country used when input is not in international form */\r\n  defaultCountry?: CountryCode;\r\n  /** If true, treat input/formatting as national by default */\r\n  nationalMode?: boolean;\r\n}\r\n\r\nexport const ngxsmk_TEL_DEFAULTS = new InjectionToken<ngxsmkTelDefaults>('ngxsmk_TEL_DEFAULTS');\r\n\r\n/** Result of parsing a phone input */\r\nexport interface ParsedPhone {\r\n  /** E.164 (+123...) if valid/parsable, else null */\r\n  e164: E164 | null;\r\n  /** National-formatted number (e.g., (415) 555-0123) */\r\n  national?: string;\r\n  /** International formatted number (e.g., +1 415 555 0123) */\r\n  international?: string;\r\n  /** 2-letter ISO country inferred by parser, if any */\r\n  country?: CountryCode;\r\n  /** Whether the number is valid for the country/region */\r\n  isValid: boolean;\r\n  /** Raw libphonenumber-js instance (optional) */\r\n  raw?: PhoneNumber;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ngxsmkTelInputService {\r\n  private defaults: Required<ngxsmkTelDefaults> = {\r\n    defaultCountry: 'US',\r\n    nationalMode: false\r\n  };\r\n\r\n  constructor(@Optional() @Inject(ngxsmk_TEL_DEFAULTS) cfg?: ngxsmkTelDefaults) {\r\n    this.defaults = { ...this.defaults, ...(cfg ?? {}) };\r\n  }\r\n\r\n  /** Update defaults at runtime if you need to (multi-tenant apps, theming, etc.) */\r\n  setDefaults(partial: ngxsmkTelDefaults) {\r\n    this.defaults = { ...this.defaults, ...partial };\r\n  }\r\n\r\n  getDefaults(): Readonly<Required<ngxsmkTelDefaults>> {\r\n    return this.defaults;\r\n  }\r\n\r\n  /** Fast check: '+...' â†’ true-ish shape (not full validation) */\r\n  looksLikeE164(v?: string | null): v is E164 {\r\n    return !!v && /^\\+\\d{3,}$/.test(v);\r\n  }\r\n\r\n  /**\r\n   * Parse any user input into structured data.\r\n   * - If input starts with +, region is inferred from the number.\r\n   * - Else uses provided `country` or the configured default.\r\n   */\r\n  parse(input: string | null | undefined, country?: CountryCode): ParsedPhone {\r\n    const raw = (input ?? '').trim();\r\n    if (!raw) return { e164: null, isValid: false };\r\n\r\n    const region = this.looksLikeE164(raw) ? undefined : (country ?? this.defaults.defaultCountry);\r\n    const pn = parsePhoneNumberFromString(raw, region);\r\n\r\n    if (!pn) return { e164: null, isValid: false };\r\n\r\n    const isValid = pn.isValid();\r\n    return {\r\n      e164: isValid ? (pn.number as E164) : null,\r\n      national: pn.formatNational(),\r\n      international: pn.formatInternational(),\r\n      country: pn.country as CountryCode | undefined,\r\n      isValid,\r\n      raw: pn\r\n    };\r\n  }\r\n\r\n  /** Validate a number (raw user input or E.164). Optionally force region. */\r\n  isValid(input: string, country?: CountryCode): boolean {\r\n    return this.parse(input, country).isValid;\r\n  }\r\n\r\n  /** Format to E.164 (or null if invalid) */\r\n  toE164(input: string, country?: CountryCode): E164 | null {\r\n    return this.parse(input, country).e164;\r\n  }\r\n\r\n  /** Format nicely for display (international vs national) */\r\n  formatDisplay(input: string, opts?: { international?: boolean; country?: CountryCode }): string {\r\n    const { international = !this.defaults.nationalMode, country } = opts ?? {};\r\n    const p = this.parse(input, country);\r\n    if (!p.raw) return input;\r\n    return international ? p.raw.formatInternational() : p.raw.formatNational();\r\n  }\r\n\r\n  /** As-you-type formatting for text inputs (pure function) */\r\n  asYouType(nextText: string, country?: CountryCode): string {\r\n    const region = country ?? this.defaults.defaultCountry;\r\n    const ayt = new AsYouType(region);\r\n    return ayt.input(nextText ?? '');\r\n  }\r\n\r\n  /** Infer country from E.164 or raw input (best effort) */\r\n  inferCountry(input: string): CountryCode | undefined {\r\n    const p = this.parse(input);\r\n    return p.country;\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Output,\r\n  PLATFORM_ID,\r\n  SimpleChanges,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {isPlatformBrowser} from '@angular/common';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors\r\n} from '@angular/forms';\r\nimport type {CountryCode} from 'libphonenumber-js';\r\nimport {ngxsmkTelInputService} from './ngxsmk-tel-input.service';\r\n\r\ntype IntlTelInstance = any; // keep loose to avoid typing the plugin's full API\r\n\r\n@Component({\r\n  selector: 'ngxsmk-tel-input',\r\n  standalone: true,\r\n  template: `\r\n    <div class=\"ngxsmk-tel-input__wrapper\">\r\n      <input\r\n        #telInput\r\n        type=\"tel\"\r\n        class=\"ngxsmk-tel-input__control\"\r\n        [id]=\"inputId || null\"\r\n        [attr.name]=\"name || null\"\r\n        [attr.placeholder]=\"placeholder || null\"\r\n        [attr.autocomplete]=\"autocomplete\"\r\n        [disabled]=\"disabled\"\r\n        (blur)=\"markTouched()\"\r\n      />\r\n    </div>\r\n  `,\r\n  providers: [\r\n    {provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ngxsmkTelInputComponent), multi: true},\r\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => ngxsmkTelInputComponent), multi: true}\r\n  ],\r\n})\r\nexport class ngxsmkTelInputComponent\r\n  implements AfterViewInit, OnChanges, OnDestroy, ControlValueAccessor {\r\n  @ViewChild('telInput', {static: true}) inputRef!: ElementRef<HTMLInputElement>;\r\n\r\n  // ===== Inputs (public API) =====\r\n  /** Initial country (ISO2) or 'auto' to pick a default via geoIpLookup stub */\r\n  @Input() initialCountry: CountryCode | 'auto' = 'US';\r\n  /** Preferred countries on top of the dropdown */\r\n  @Input() preferredCountries: CountryCode[] = ['US', 'GB'];\r\n  /** Limit to these countries only (omit for all) */\r\n  @Input() onlyCountries?: CountryCode[];\r\n  /** Show national numbers instead of E.164 in the box (emits E.164) */\r\n  @Input() nationalMode = false;\r\n  /** Show the dial code separately before the input (intl-tel-input option) */\r\n  @Input() separateDialCode = false;\r\n  /** Allow opening the country dropdown */\r\n  @Input() allowDropdown = true;\r\n\r\n  /** Plain input attributes */\r\n  @Input() placeholder = 'Enter phone number';\r\n  @Input() autocomplete = 'tel';\r\n  @Input() name?: string;\r\n  @Input() inputId?: string;\r\n\r\n  /** Disabled state (also settable via Angular Forms) */\r\n  @Input() disabled = false;\r\n\r\n  // ===== Outputs =====\r\n  @Output() countryChange = new EventEmitter<{ iso2: CountryCode }>();\r\n  @Output() validityChange = new EventEmitter<boolean>();\r\n\r\n  // ===== Internal =====\r\n  private iti: IntlTelInstance | null = null;\r\n  private onChange: (val: string | null) => void = () => {\r\n  };\r\n  private onTouched: () => void = () => {\r\n  };\r\n  private lastEmittedValid = false;\r\n  private pendingWrite: string | null = null; // cache writeValue before plugin ready\r\n\r\n  constructor(\r\n    private readonly zone: NgZone,\r\n    private readonly tel: ngxsmkTelInputService,\r\n    @Inject(PLATFORM_ID) private readonly platformId: Object\r\n  ) {\r\n  }\r\n\r\n  // ========== Lifecycle ==========\r\n  async ngAfterViewInit() {\r\n    if (!isPlatformBrowser(this.platformId)) return;\r\n\r\n    await this.initIntlTelInput();\r\n    this.bindDomListeners();\r\n\r\n    // apply any pending value from writeValue\r\n    if (this.pendingWrite !== null) {\r\n      this.setInputValue(this.pendingWrite);\r\n      this.handleInput();\r\n      this.pendingWrite = null;\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!isPlatformBrowser(this.platformId)) return;\r\n\r\n    // If config inputs changed after init, re-init the plugin (safe & simple)\r\n    const configChanged = ['initialCountry', 'preferredCountries', 'onlyCountries', 'separateDialCode', 'allowDropdown', 'nationalMode']\r\n      .some(k => k in changes && !changes[k].firstChange);\r\n\r\n    if (configChanged && this.iti) {\r\n      this.reinitPlugin();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyPlugin();\r\n  }\r\n\r\n  // ========== ControlValueAccessor ==========\r\n  writeValue(val: string | null): void {\r\n    if (!this.inputRef) return;\r\n    if (!this.iti) {\r\n      // cache until plugin is ready\r\n      this.pendingWrite = val ?? '';\r\n      return;\r\n    }\r\n    this.setInputValue(val ?? '');\r\n    // Do not trigger onChange here; writeValue is programmatic\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    if (this.inputRef) this.inputRef.nativeElement.disabled = isDisabled;\r\n  }\r\n\r\n  // ========== Validator ==========\r\n  validate(_: AbstractControl): ValidationErrors | null {\r\n    const raw = this.currentRaw();\r\n    if (!raw) return null; // let \"required\" handle empties\r\n    const valid = this.tel.isValid(raw, this.currentIso2());\r\n    if (valid !== this.lastEmittedValid) {\r\n      this.lastEmittedValid = valid;\r\n      this.validityChange.emit(valid);\r\n    }\r\n    return valid ? null : {phoneInvalid: true};\r\n  }\r\n\r\n  // ========== Public Helpers ==========\r\n  focus(): void {\r\n    this.inputRef?.nativeElement.focus();\r\n  }\r\n\r\n  selectCountry(iso2: CountryCode): void {\r\n    if (this.iti) {\r\n      this.iti.setCountry(iso2.toLowerCase());\r\n      this.handleInput();\r\n    }\r\n  }\r\n\r\n  markTouched() {\r\n    this.onTouched();\r\n  }\r\n\r\n  // ========== Private: DOM & Plugin ==========\r\n  private async initIntlTelInput() {\r\n    const [{default: intlTelInput}] = await Promise.all([\r\n      import('intl-tel-input'),\r\n    ]);\r\n\r\n    // Minimal config â€“ we rely on ngxsmkTelInputService for validation/formatting\r\n    const config: any = {\r\n      initialCountry: this.initialCountry === 'auto' ? 'auto' : (this.initialCountry?.toLowerCase() || 'us'),\r\n      preferredCountries: (this.preferredCountries ?? []).map(c => c.toLowerCase()),\r\n      onlyCountries: (this.onlyCountries ?? []).map(c => c.toLowerCase()),\r\n      nationalMode: this.nationalMode,\r\n      allowDropdown: this.allowDropdown,\r\n      separateDialCode: this.separateDialCode,\r\n      // If initialCountry is 'auto', provide a trivial geoIpLookup (customize in your app)\r\n      geoIpLookup: (cb: (iso2: string) => void) => cb('us'),\r\n      utilsScript: undefined // keep bundle small; we use libphonenumber-js via the service\r\n    };\r\n\r\n    this.zone.runOutsideAngular(() => {\r\n      this.iti = intlTelInput(this.inputRef.nativeElement, config);\r\n    });\r\n  }\r\n\r\n  private reinitPlugin() {\r\n    this.destroyPlugin();\r\n    // keep current value\r\n    const current = this.currentRaw();\r\n    this.initIntlTelInput().then(() => {\r\n      if (current) {\r\n        this.setInputValue(current);\r\n        this.handleInput();\r\n      }\r\n    });\r\n  }\r\n\r\n  private destroyPlugin() {\r\n    if (this.iti) {\r\n      this.iti.destroy();\r\n      this.iti = null;\r\n    }\r\n    // remove listeners by cloning node (simple & safe)\r\n    if (this.inputRef?.nativeElement) {\r\n      const el = this.inputRef.nativeElement;\r\n      const clone = el.cloneNode(true) as HTMLInputElement;\r\n      el.parentNode?.replaceChild(clone, el);\r\n      // update reference\r\n      (this.inputRef as any).nativeElement = clone;\r\n    }\r\n  }\r\n\r\n  private bindDomListeners() {\r\n    const el = this.inputRef.nativeElement;\r\n\r\n    this.zone.runOutsideAngular(() => {\r\n      el.addEventListener('input', () => this.handleInput());\r\n      el.addEventListener('countrychange', () => {\r\n        const iso2 = this.currentIso2();\r\n        this.zone.run(() => this.countryChange.emit({iso2}));\r\n        this.handleInput();\r\n      });\r\n      el.addEventListener('paste', () => queueMicrotask(() => this.handleInput()));\r\n      el.addEventListener('blur', () => this.zone.run(() => this.onTouched()));\r\n    });\r\n  }\r\n\r\n  private handleInput() {\r\n    const raw = this.currentRaw();\r\n    const iso2 = this.currentIso2();\r\n\r\n    const parsed = this.tel.parse(raw, iso2);\r\n    // Emit E.164 (or null if invalid)\r\n    this.zone.run(() => this.onChange(parsed.e164));\r\n\r\n    // Optional: present national vs. international in the box without fighting the user\r\n    // We only normalize whitespace; avoid aggressive reformatting to preserve caret.\r\n    if (raw && this.nationalMode && parsed.national) {\r\n      // Replace double spaces etc. (intl-tel-input already styles)\r\n      const normalized = parsed.national.replace(/\\s{2,}/g, ' ');\r\n      if (normalized !== raw) this.setInputValue(normalized);\r\n    }\r\n  }\r\n\r\n  private currentRaw(): string {\r\n    return (this.inputRef?.nativeElement.value ?? '').trim();\r\n  }\r\n\r\n  private currentIso2(): CountryCode {\r\n    const iso2 = (this.iti?.getSelectedCountryData?.().iso2 ?? this.initialCountry ?? 'US').toString().toUpperCase();\r\n    return iso2 as CountryCode;\r\n  }\r\n\r\n  private setInputValue(v: string) {\r\n    this.inputRef.nativeElement.value = v ?? '';\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of ngxsmk-tel-input\r\n */\r\n\r\nexport * from './lib/ngxsmk-tel-input.service';\r\nexport * from './lib/ngxsmk-tel-input.component';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}